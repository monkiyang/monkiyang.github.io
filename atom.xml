<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MengQi Yang</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://5mengqi.cc/"/>
  <updated>2017-03-19T07:52:11.000Z</updated>
  <id>http://5mengqi.cc/</id>
  
  <author>
    <name>MengQi Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS面试题收录</title>
    <link href="http://5mengqi.cc/blogs/include-ios-interview-questions/"/>
    <id>http://5mengqi.cc/blogs/include-ios-interview-questions/</id>
    <published>2017-03-15T05:55:00.000Z</published>
    <updated>2017-03-19T07:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>工作这么些年，被面试和面试他人都有经历不少了，个人感觉过程中除了技术考察外态度也很重要，诚恳、谦虚、自信、上进这些应该是一个优秀面试者该有的特质！回答问题要抓住重点，不知为不知即可，尽量别紧张，交流也是一种拓宽知识面、收获新知识的方式，往往面试官对你的提点会有所帮助。</p>
<h2 id="刷刷面试题"><a href="#刷刷面试题" class="headerlink" title="刷刷面试题"></a>刷刷面试题</h2><p>面试之前还是要做足准备的，除了对项目要加深熟悉外，刷一刷热门面试题也是有用的。以下为我的收录（皆可搜到，自刷方可熟记）：</p>
<h4 id="1-什么情况使用weak关键字，相比assgin有什么不同"><a href="#1-什么情况使用weak关键字，相比assgin有什么不同" class="headerlink" title="1.什么情况使用weak关键字，相比assgin有什么不同"></a>1.什么情况使用weak关键字，相比assgin有什么不同</h4><p>weak使用场景有delegate代理属性、Xib/Storboard的IBOutlet视图属性，weak属性是指在setter设置方法里无保留新值、释放旧值操作，当指向的对象被销毁时，会自动置空（=nil），而assgin只是对纯量类型（scalar type，例如CGFloat、NSInteger）的简单赋值操作。</p>
<h4 id="2-这个写法会出什么问题：-property-copy-NSMutableArray-array"><a href="#2-这个写法会出什么问题：-property-copy-NSMutableArray-array" class="headerlink" title="2.这个写法会出什么问题：@property (copy) NSMutableArray *array;"></a>2.这个写法会出什么问题：@property (copy) NSMutableArray *array;</h4><p>可变数组copy后会变成不可变数组，再对其添加、删除、修改元素时，会因为找不到对应方法而崩溃；<br>使用atomic会在setter方法中加入锁机制严重影响性能。</p>
<h4 id="3-如何让自己的类用copy修饰符？如何重写带copy关键字的-setter？"><a href="#3-如何让自己的类用copy修饰符？如何重写带copy关键字的-setter？" class="headerlink" title="3.如何让自己的类用copy修饰符？如何重写带copy关键字的 setter？"></a>3.如何让自己的类用copy修饰符？如何重写带copy关键字的 setter？</h4><p>自定义类要支持copy方法，需要声明该类遵从NSCopying协议，并实现其协议方法<code>- (id)copyWithZone:(NSZone *)zone</code>，举例如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MKUser</span>&lt;<span class="title">NSCopying</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *username;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, assgin) <span class="built_in">NSUInteger</span> age;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableSet</span> *friends;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithUsername:(<span class="built_in">NSString</span> *)username</div><div class="line">                         age:(<span class="built_in">NSUInteger</span>)age &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _username = [username <span class="keyword">copy</span>];</div><div class="line">        _age = age;</div><div class="line">        _friends = [[<span class="built_in">NSMutableSet</span> alloc] init];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</div><div class="line">    <span class="built_in">MKUser</span> *<span class="keyword">copy</span> = [[[<span class="keyword">self</span> <span class="keyword">class</span>] allocWithZone:zone]</div><div class="line">                     initWithUsername:_username</div><div class="line">                     age:_age];</div><div class="line">    <span class="keyword">copy</span>-&gt;_friends = [_friends mutableCopy];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">copy</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 针对集合类型对象实现深拷贝即逐个复制集合中的元素</span></div><div class="line">- (<span class="keyword">id</span>)deepCopy &#123;</div><div class="line">	    <span class="built_in">MKUser</span> *<span class="keyword">copy</span> = [[[<span class="keyword">self</span> <span class="keyword">class</span>] allocWithZone:zone]</div><div class="line">                     initWithUsername:_username</div><div class="line">                     age:_age];</div><div class="line">    <span class="keyword">copy</span>-&gt;_friends = [[<span class="built_in">NSMutableSet</span> alloc] initWithSet:_friends copyItems:<span class="literal">YES</span>];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">copy</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>重写copy语义的setter方法如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setUsername:(<span class="built_in">NSString</span> *)username &#123;</div><div class="line">	<span class="keyword">if</span> (_username != username) &#123;</div><div class="line">		_username = [username <span class="keyword">copy</span>];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的"><a href="#4-property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的" class="headerlink" title="4. @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的"></a>4. @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</h4><p>@property本质是结构体（struct），runtime对@property的定义如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// runtime.h</span></div><div class="line"><span class="comment">/// An opaque type that represents an Objective-C declared property.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_property *objc_property_t;</div><div class="line"></div><div class="line"><span class="comment">/// Defines a property attribute</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;           <span class="comment">/**&lt; The name of the attribute */</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *value;          <span class="comment">/**&lt; The value of the attribute (usually empty) */</span></div><div class="line">&#125; objc_property_attribute_t;</div><div class="line"></div><div class="line"><span class="comment">// objc-private.h</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> property_t *objc_property_t;</div><div class="line"></div><div class="line"><span class="comment">// objc-runtime-new.h</span></div><div class="line"><span class="keyword">struct</span> property_t &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;<span class="comment">// 属性名</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *attributes;<span class="comment">// 属性个数和objc_property_attribute_t中元素组成的字符串</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TestClass.m</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *string;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">objc_property_t *props = class_copyPropertyList([TestClass <span class="keyword">class</span>], &amp;count);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"count %u, %s"</span>, count, property_getAttributes(*props));</div><div class="line"></div><div class="line"><span class="meta"># <span class="meta-string">"count 1, T@"</span>NSString<span class="meta-string">",C,N,V_string"</span></span></div></pre></td></tr></table></figure>
<p>实测结果中T表示类型、C表示copy、N表示nonatomic、V表示实例变量（_ivar）。</p>
<p><strong>ivar、getter、setter 是如何生成并添加到这个类中的？</strong><br>属性定义好后，编译器会在编译期自动合成（autosynthesis）存取方法（setter和getter），并且添加对应名称的实例变量（_ivar），其中可通过@synthesize指定不同的实例变量名称。<br>实现流程：每增加一个属性，系统都会在成员变量列表（ivar_list）中添加一个成员变量的描述，在方法列表（method_list）添加setter和getter方法的描述，在属性列表（prop_list）添加一个属性的描述，然后计算该属性在对象中的偏移量，然后给出setter与getter方法对应的实现，在setter方法中从偏移量的位置开始赋值，在getter方法中从偏移量开始取值，为了能够读取正确字节数，系统对象偏移量的指针类型进行了类型强转。</p>
<h4 id="5-protocol-和-category-中如何使用-property"><a href="#5-protocol-和-category-中如何使用-property" class="headerlink" title="5.@protocol 和 category 中如何使用 @property"></a>5.@protocol 和 category 中如何使用 @property</h4><p>协议（protocol）中使用@property是希望遵从此协议的对象实现setter和getter方法;<br>分类（category）中使用@property需要用到runtime的关联对象（associated object）。举个例子：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NSObject+AssociatedObject.h</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">AssociatedObject</span>)</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> associatedObject;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// NSObject+AssociatedObject.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">AssociatedObject</span>)</span></div><div class="line"><span class="keyword">@dynamic</span> associatedObject;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setAssociatedObject:(<span class="keyword">id</span>)object &#123;</div><div class="line">	objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(associatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)associatedObject &#123;</div><div class="line">	<span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(associatedObject));</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h4 id="6-runtime如何实现weak属性"><a href="#6-runtime如何实现weak属性" class="headerlink" title="6.runtime如何实现weak属性"></a>6.runtime如何实现weak属性</h4><p>系统将以weak指针指向对象的内存地址为key，所有weak指针为value的键值对存入一个全局weak引用表中，当这个对象被销毁时，会从weak表中搜出以key为键的所有weak指针，并遍历将weak指针指向nil对象。runtime代码摘录如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NSObject.mm</span></div><div class="line"><span class="keyword">id</span> objc_initWeak(<span class="keyword">id</span> *location, <span class="keyword">id</span> newObj)</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">template &lt;<span class="keyword">bool</span> HaveOld, <span class="keyword">bool</span> HaveNew, <span class="keyword">bool</span> CrashIfDeallocating&gt;</div><div class="line"><span class="keyword">static</span> <span class="keyword">id</span> </div><div class="line">storeWeak(<span class="keyword">id</span> *location, objc_object *newObj)</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  newObj = (objc_object *)weak_register_no_lock(&amp;newTable-&gt;weak_table, </div><div class="line">                                                      (<span class="keyword">id</span>)newObj, location, </div><div class="line">                                                      CrashIfDeallocating);</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> SideTable &#123;</div><div class="line">	...</div><div class="line">  weak_table_t weak_table;</div><div class="line">	...</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// objc-weak.h</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The global weak references table. Stores object ids as keys,</div><div class="line"> * and weak_entry_t structs as their values.</div><div class="line"> */</div><div class="line"><span class="keyword">struct</span> weak_table_t &#123;</div><div class="line">    weak_entry_t *weak_entries;</div><div class="line">    size_t    num_entries;</div><div class="line">    uintptr_t mask;</div><div class="line">    uintptr_t max_hash_displacement;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// objc-weak.mm</span></div><div class="line"><span class="comment">/** </span></div><div class="line"> * Registers a new (object, weak pointer) pair. Creates a new weak</div><div class="line"> * object entry if it does not exist.</div><div class="line"> * </div><div class="line"> * @param weak_table The global weak table.</div><div class="line"> * @param referent The object pointed to by the weak reference.</div><div class="line"> * @param referrer The weak pointer address.</div><div class="line"> */</div><div class="line"><span class="keyword">id</span> </div><div class="line">weak_register_no_lock(weak_table_t *weak_table, <span class="keyword">id</span> referent_id, </div><div class="line">                      <span class="keyword">id</span> *referrer_id, <span class="keyword">bool</span> crashIfDeallocating)</div><div class="line">&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"> * Called by dealloc; nils out all weak pointers that point to the </div><div class="line"> * provided object so that they can no longer be used.</div><div class="line"> * </div><div class="line"> * @param weak_table </div><div class="line"> * @param referent The object being deallocated. </div><div class="line"> */</div><div class="line"><span class="keyword">void</span> </div><div class="line">weak_clear_no_lock(weak_table_t *weak_table, <span class="keyword">id</span> referent_id)</div><div class="line">&#123;</div><div class="line">	...</div><div class="line">	<span class="keyword">if</span> (*referrer == referent) &#123;</div><div class="line">	    *referrer = <span class="literal">nil</span>;</div><div class="line">  &#125;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="7-property中有哪些属性关键字？-property-后面可以有哪些修饰符？"><a href="#7-property中有哪些属性关键字？-property-后面可以有哪些修饰符？" class="headerlink" title="7.@property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？"></a>7.@property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？</h4><p>原子性：atomic（默认）、nonatomic<br>使用atomic，会在setter方法中加锁，其方案是自旋锁（spinlocks），而不是<code>@synchronized(self)</code>，其原因是自旋锁更快，对于属性设置这种相对快的操作更适合。在runtime中的实现：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// objc-accessors.mm</span></div><div class="line"><span class="keyword">void</span> objc_setProperty(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd, ptrdiff_t offset, <span class="keyword">id</span> newValue, <span class="built_in">BOOL</span> atomic, <span class="keyword">signed</span> <span class="keyword">char</span> shouldCopy) </div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  reallySetProperty(<span class="keyword">self</span>, _cmd, newValue, offset, atomic, <span class="keyword">copy</span>, mutableCopy);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> reallySetProperty(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd, <span class="keyword">id</span> newValue, ptrdiff_t offset, <span class="keyword">bool</span> atomic, <span class="keyword">bool</span> <span class="keyword">copy</span>, <span class="keyword">bool</span> mutableCopy)</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  spinlock_t&amp; slotlock = PropertyLocks[slot];</div><div class="line">  slotlock.lock();</div><div class="line">  oldValue = *slot;</div><div class="line">  *slot = newValue;        </div><div class="line">  slotlock.unlock();</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>读/写权限：readwrite（默认）、readonly<br>内存管理语义：assgin、strong、weak、unsafe_unretained、copy<br>unsafe_unretained属性对象被销毁时，其指针不会被指向nil对象，因此如果再调用这个销毁对象的方法，是会报错崩溃的。<br>方法名：<code>getter=&lt;name&gt;</code>、<code>setter=&lt;name&gt;</code><br><code>getter=\&lt;name\&gt;</code>样式举例：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">getter</span>=theNewOne) <span class="built_in">NSString</span> *newOne;</div></pre></td></tr></table></figure></p>
<p>不常用：nonnull、nullable、null_resettable<br>nonnull表示不可为nil<br>nullable表示可为nil<br>null_resettable表示setter nullable而getter nonnull</p>
<h4 id="8-synthesize和-dynamic分别有什么作用？"><a href="#8-synthesize和-dynamic分别有什么作用？" class="headerlink" title="8.@synthesize和@dynamic分别有什么作用？"></a>8.@synthesize和@dynamic分别有什么作用？</h4><p>@synthesize表示如果没有手动实现setter和getter，编译器会自动帮你合成，并添加相应类型的实例变量；<br>@dynamic表示setter和getter自行实现，声明@dynamic使编译器不会警告，但运行时如果setter和getter方法不存在并被调用的话会报错崩溃。</p>
<h4 id="9-用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？"><a href="#9-用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？" class="headerlink" title="9.用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？"></a>9.用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</h4><p>使用copy会拷贝出一个新的不可变对象，这样保证了本对象不会有被改变的风险，如果使用strong声明，当这个指针指向的是一个可变对象时，这个对象假如在外部改变了，内部<br>也会受影响。举例说明：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *string;</div><div class="line"></div><div class="line"><span class="built_in">NSMutableString</span> *mutableString = [[<span class="built_in">NSMutableString</span> alloc] init];</div><div class="line"><span class="keyword">self</span>.string = mutableString;</div><div class="line">[mutableString appendString:<span class="string">@" hello monki!"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"\nmutableString(%p)=%@\n_string(%p)=%@"</span>, mutableString, mutableString, _string, _string);</div><div class="line">    </div><div class="line"><span class="keyword">self</span>.string = [mutableString <span class="keyword">copy</span>];</div><div class="line">[mutableString appendString:<span class="string">@" hello MengQi Yang!"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"\nmutableString(%p)=%@\n_string(%p)=%@"</span>, mutableString, mutableString, _string, _string);</div><div class="line"></div><div class="line"><span class="meta"># mutableString(0x608000262f00)= hello monki!</span></div><div class="line"><span class="meta"># _string(0x608000262f00)= hello monki!</span></div><div class="line"></div><div class="line"><span class="meta"># mutableString(0x608000262f00)= hello monki! hello MengQi Yang!</span></div><div class="line"><span class="meta"># _string(0x600000234780)= hello monki!</span></div></pre></td></tr></table></figure></p>
<p>延伸理解下深拷贝和浅拷贝：<br>对非集合类、不可变（immutable）对象操作，copy是指针拷贝，mutableCopy是内容拷贝，而对非集合类、可变（mutable）对象操作，都是内容拷贝。代码示例：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[immutableObject <span class="keyword">copy</span>]<span class="comment">// 浅拷贝</span></div><div class="line">[immutableObject mutableCopy]<span class="comment">// 深拷贝</span></div><div class="line">[mutableObject <span class="keyword">copy</span>]<span class="comment">// 深拷贝</span></div><div class="line">[mutableObject mutableCopy]<span class="comment">// 深拷贝</span></div></pre></td></tr></table></figure></p>
<p>对集合类、不可变对象操作，copy是指针拷贝，mutableCopy是内容拷贝，而对集合类、可变对象操作，都是内容拷贝。注意：集合对象内容拷贝仅限于对象本身，对象元素仍然是指针拷贝。代码示例：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[immutableSet <span class="keyword">copy</span>]<span class="comment">// 浅拷贝</span></div><div class="line">[immutableSet mutableCopy]<span class="comment">// 单层深拷贝</span></div><div class="line">[mutableSet <span class="keyword">copy</span>]<span class="comment">// 单层深拷贝</span></div><div class="line">[mutableSet mutableCopy]<span class="comment">// 单层深拷贝</span></div></pre></td></tr></table></figure></p>
<h4 id="10-synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？"><a href="#10-synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？" class="headerlink" title="10. @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？"></a>10. @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？</h4><p>规则如下：<br>1.如果指定了实例变量名称，会生成指定名称的实例变量<code>@synthesize foo = _foo</code><br>2.如果这个变量已经存在了就不再生成了<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TestClass</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line">  <span class="built_in">NSObject</span> *_foo;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>3.如果没指定实例变量名称，会生成属性同名的实例变量<code>@synthesize foo</code></p>
<p><strong>假如 property 名为 foo，存在一个名为 _foo 的实例变量，那么还会自动合成新变量么？</strong><br>不会，示例如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TestClass</span> () </span>&#123;</div><div class="line">    <span class="built_in">NSString</span> *_string;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *string;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *_string;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="meta"># Warning：Auto property synthesis will not synthesize property '_string' because it cannot share an ivar with another synthesized property</span></div></pre></td></tr></table></figure></p>
<h4 id="11-在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？"><a href="#11-在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？" class="headerlink" title="11.在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？"></a>11.在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</h4><p>场景包括：<br>1.重写setter和getter时<br>2.重写只读属性的getter时<br>3.protocol中定义的属性<br>4.父类中重载的属性</p>
<p>示例如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// BaseClass.h</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BaseClass</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *string4;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// TestClass.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">"BaseClass.h"</span></span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TestClass</span>: <span class="title">BaseClass</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// TestClass.m</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">TestProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *string3;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TestClass</span> ()&lt;<span class="title">TestProtocol</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *string1;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *string2;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *string4;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TestClass</span></span></div><div class="line"><span class="keyword">@synthesize</span> string1 = _string1;</div><div class="line"><span class="keyword">@synthesize</span> string2 = _string2;</div><div class="line"><span class="keyword">@synthesize</span> string3 = _string3;</div><div class="line"><span class="keyword">@synthesize</span> string4 = _string4;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setString1:(<span class="built_in">NSString</span> *)string1 &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)string1 &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)string2 &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h4 id="12-objc中向一个nil对象发送消息将会发生什么？"><a href="#12-objc中向一个nil对象发送消息将会发生什么？" class="headerlink" title="12.objc中向一个nil对象发送消息将会发生什么？"></a>12.objc中向一个nil对象发送消息将会发生什么？</h4><p><strong>未完待续</strong></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88%EF%BC%88%E4%B8%8A%EF%BC%89.md" target="_blank" rel="external">《招聘一个靠谱的iOS》面试题参考答案（上）</a></p>
<p><a href="https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88%EF%BC%88%E4%B8%8B%EF%BC%89.md" target="_blank" rel="external">《招聘一个靠谱的iOS》面试题参考答案（下）</a></p>
]]></content>
    
    <summary type="html">
    
      工作这么些年，被面试和面试他人都有经历不少了，个人感觉一个优秀的面试者应该包含诚恳、谦虚、自信、上进这些特质！当然技术也是很重要的考察点，因此面试之前还是要充分准备的，除了要对项目加深熟悉外，刷一刷热门面试题也是有用的。
    
    </summary>
    
      <category term="iOS" scheme="http://5mengqi.cc/categories/ios/"/>
    
    
      <category term="面试" scheme="http://5mengqi.cc/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客</title>
    <link href="http://5mengqi.cc/blogs/build-personal-blog/"/>
    <id>http://5mengqi.cc/blogs/build-personal-blog/</id>
    <published>2016-05-27T16:00:00.000Z</published>
    <updated>2017-03-16T16:06:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>一直有想法弄个博客来写东西，可怯于自己的水平、文笔怕写不出什么内容来，加之人也有点惰性blabla，也是拖了好久，现在想着其实没必要在意这么多，网络的世界重在分享！每个人成长所处阶段并不一样，总结出来的也不都正确，要敢于暴露自己的错误，才更能收获知识的正确。技术类博文对很多技术人是有导向性的，如果知识传递不正确，很多人的理解就会偏差，所以还是要尽量深入的去研究再总结，博文也应该随着技术更新而更新，交流也是很重要的。</p>
<h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p>先来聊聊如何搭建博客吧！Github Pages提供了免费域名(类似<code>http://username.github.io</code>)来搭建网页，有以下几个步骤:</p>
<p>1.申请一个GitHub账号-&gt;<a href="https://github.com/join" target="_blank" rel="external">地址</a><br>2.创建一个名为<code>username.github.io</code>的仓库（<code>username</code>填写GitHub用户名，请确保一致，否则会报错404）<br>3.使用你偏爱的方式克隆此仓库，此处以Terminal方式来介绍（包括GUI工具<a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a>或<a href="https://desktop.github.com/" target="_blank" rel="external">GitHub</a>）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 克隆仓库到本地</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/username/username.github.io</div><div class="line"></div><div class="line"><span class="comment"># Hello World首页</span></div><div class="line">$ <span class="built_in">cd</span> username.github.io</div><div class="line">$ <span class="built_in">echo</span> <span class="string">"Hello World"</span> &gt; index.html</div><div class="line"></div><div class="line"><span class="comment"># 推送远端</span></div><div class="line">$ git add <span class="_">-a</span></div><div class="line">$ git commit -m <span class="string">"Initial commit"</span></div><div class="line">$ git push</div></pre></td></tr></table></figure></p>
<p>4.浏览器输入<code>http://username.github.io</code>访问Hello World页面</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo提供了很多精美的<a href="http://hexo.io/themes/" target="_blank" rel="external">博客主题模板</a>，还有很多便利的<a href="http://hexo.io/plugins/" target="_blank" rel="external">插件</a>，要使用此博客引擎首先要安装Node.js-&gt;<a href="https://nodejs.org/en/" target="_blank" rel="external">官网地址</a>，可用<code>$ node -v</code>或<code>$ npm -v</code>命令检测版本，接着通过<code>$ npm install hexo-cli -g</code>命令安装Hexo即可。</p>
<h4 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h4><p><strong>初始化博客</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 博客目录下</span></div><div class="line">$ hexo init</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p><strong>修改主题</strong><br>可在/themes目录下查看博客主题，初始默认提供landscape主题，要更换的话，需要先从远端仓库克隆到/themes目录下，例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/monkiyang/hexo-theme-polarbear.git themes/polarbear</div></pre></td></tr></table></figure></p>
<p>然后修改_config.yml文件中themes配置即<code>themes:polarbear</code></p>
<p><strong>预览博客</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div><div class="line"></div><div class="line"><span class="comment"># INFO  Start processing</span></div><div class="line"><span class="comment"># INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></div></pre></td></tr></table></figure></p>
<p>浏览器输入<code>http://localhost:4000/</code>预览本地博客。</p>
<p><strong>写文章</strong><br><code>$ hexo new title</code>会在.source/_posts目录下生成一个.md文件，用Markdown编辑好内容，<code>hexo s</code>预览效果。</p>
<p><strong>部署博客</strong><br><code>hexo g</code>会生成一个public目录，里面包括你所有的网页及资源。注意：每次部署前，先执行<code>hexo g</code>，因为部署会提取public目录下的内容推送至远端仓库。修改_config.yml文件中deploy配置为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repo: git@github.com:username/username.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure></p>
<p>然后<code>$ npm install hexo-deployer-git -save</code>命令安装hexo-deployer-git插件，最后执行<code>$ hexo -d</code>，等上传成功后，就能通过<code>http://username.github.io</code>访问博客。</p>
<h2 id="个性域名"><a href="#个性域名" class="headerlink" title="个性域名"></a>个性域名</h2><p>1.在<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">阿里云万网</a>付费注册一个域名<br>2.在username.github.io仓库创建一个CNAME文件，在其中加入购买的域名<br>3.在阿里云万网配置域名解析指向<code>http://username.github.io</code><br>4.浏览器输入个性域名访问博客</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="external">Github Pages帮助文档</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo帮助文档</a><br><a href="http://dapanggit.github.io/jekyll-to-hexo/" target="_blank" rel="external">成功叛逃到hexo</a> by <a href="http://dapanggit.github.io/" target="_blank" rel="external">Lyeec</a></p>
]]></content>
    
    <summary type="html">
    
      一直有想法弄个博客来写东西，可怯于自己的水平、文笔怕写不出什么内容来，加之人也有点惰性blabla，也是拖了好久，现在想着其实没必要在意这么多，网络的世界重在分享！so先来聊聊如何搭建博客吧！
    
    </summary>
    
      <category term="其它" scheme="http://5mengqi.cc/categories/other/"/>
    
    
      <category term="Github Pages" scheme="http://5mengqi.cc/tags/github-pages/"/>
    
      <category term="Hexo" scheme="http://5mengqi.cc/tags/hexo/"/>
    
  </entry>
  
</feed>
